h1. Bitmasked Plugin

Row-level filtering of models via bitmasks.

h2. Requirements

* PHP5.2+ (Fully featured with 5.3+)
* CakePHP 2.0+

h2. Installation

h3. Manual

# Download this: http://github.com/jmcneese/bitmasked/zipball/master
# Unzip that download.
# Copy the resulting folder to app/plugins
# Rename the folder you just copied to @bitmasked@

h3. GIT Submodule

From your repository root directory type:
<pre><code>git submodule add git://github.com/jmcneese/bitmasked.git app/Plugin/Bitmasked
git submodule update --init
</code></pre>

h3. GIT Clone

In your plugin directory type
<pre><code>git clone git://github.com/jmcneese/bitmasked.git Bitmasked</code></pre>

h2. Usage

# Import the SQL in config/schema/bitmasked_bits.sql into your application's database
# Activate the behavior in whichever model(s) you desire, via:<pre><code>
public $actsAs = array(
	'Bitmasked.Bitmasked'
);
</code></pre>

h2. Options

There are several configurable options that can be passed into the behavior:

* <em>disabled</em> -- If you want the behavior to start as disabled, i.e. not automatically filter rows based on bitmask, set this to true. Default: false
* <em>default</em> -- This is the default bit that is saved for new records for this model, unless otherwise specified in save data. Default: 1
* <em>bits</em> -- An array of flags (string) that map to bits (integer) to use for this particular model. Default: array('ALL' => 1)
* <em>mask</em> -- The bitmask to use when finding records on this model. There are several possible settings here:
** Implicit (integer). This is when the bitmask is static across all finds.
** Flag (string). This is a string representation of a flag you have defined in the 'bits' option.
** Flags (array). An array of flags in string form.
** Callback (mixed). Either a string referring to a function name in global scope, a method in the attached model or an anonymous function (PHP5.3 only).

h2. Examples

Lets say we run a grocery store and want to easily query all the items that a user is allowed to even view. For this example we'll use items that have age restrictions. 

First off, lets section off our groups into common restrictions. This is easy to do by adjusting our <code>bitmask</code> setting on the behavior for our model.

<pre><code>
public $actsAs = array(
	'Bitmasked.Bitmasked' => array(
		'bits' => array(
			'ALL' => 1,
			'18+' => 2,
			'21+' => 4,
			'55+' => 8
		)
	)
);
</code></pre>

We've given each group an easy to remember name that we can reference later on in our queries. With that out of the way we can go ahead and create our items.

<pre><code>
 // Item for everyone.
$this->Item->create();
$this->Item->save(array(
	'name' => 'Ice Cream',
	'bits' => array(
		'ALL',
		'18+',
		'21+',
		'55+'
	)
));

// Item for 18+ year olds
$this->Item->create();
$this->Item->save(array(
	'name' => 'Cigarettes',
	'bits' => array(
		'18+',
		'21+',
		'55+'
	)
));

// Item for 21+ year olds
$this->Item->create();
$this->Item->save(array(
	'name' => 'Alcohol',
	'bits' => array(
		'21+',
		'55+'
	)
));

// Item for 55+ year olds
$this->Item->create();
$this->Item->save(array(
	'name' => 'Lawn',
	'bits' => array(
		'55+'
	)
));
</code></pre>

Notice how for the items we saved the lowest matching group and all the above ones. Just because you're 28 doesn't mean you don't want ice cream, right?

With those rows created we can easily get at only the rows that are applicable to be shown. Here's an example of finding everything that can be seen by an 18 year old.

<pre><code>
$items = $this->Item->find(
	'all',
	array(
		'conditions' => array(),
		'bitmask' => array(
			'18+'
		)
	)
);
</code></pre>

In our <code>$items</code> array we should have the "Ice Cream" and "Cigarettes" records available. Notice how we made use of the name of the group (<code>18+</code>) instead of the actual bitmask value.

Instead of saving the items with all of their available groups, you can save them with their lowest group and instead query for all groups that the person is allowed; the same example would look like this

<pre><code>
 // Item for everyone. Note we only save "ALL"
$this->Item->create();
$this->Item->save(array(
	'name' => 'Ice Cream',
	'bits' => array(
		'ALL'
	)
));

// Query for an 18yr old. Notice how we include "ALL"
$items = $this->Item->find(
	'all',
	array(
		'conditions' => array(),
		'bitmask' => array(
			'ALL',
			'18+'
		)
	)
);
</code></pre>

h2. Todo

* Add behavior method to reconfigure, e.g. change configuration options.

h2. License

Copyright (c) 2009-2012 Joshua M. McNeese, Curtis J. Beeson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.